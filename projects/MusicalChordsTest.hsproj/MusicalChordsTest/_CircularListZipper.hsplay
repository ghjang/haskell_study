-- Haskell Playground 1.0
init [1, 2, 3]
init [1, 2]
init [1]

last [1]

createCircularListZipper []

zipper = createCircularListZipper [1, 2, 3]
zipper

next zipper
(next .snd) $ next zipper
(next . snd) . (next .snd) $ next zipper
(next . snd) . (next . snd) . (next .snd) $ next zipper

prev zipper
(prev .snd) $ prev zipper
(prev . snd) . (prev .snd) $ prev zipper
(prev . snd) . (prev . snd) . (prev .snd) $ prev zipper

(prev . snd) . (next .snd) $ next zipper

(next . snd) . (prev .snd) $ prev zipper

s = do
  nextItem
  nextItem
  
runState s $ createCircularListZipper [1, 2, 3]

s1 = do
  nextItem
  nextItem
  nextItem
    
runState s1 $ createCircularListZipper [1, 2, 3]

s2 = do
  nextItem
  nextItem
  nextItem
  prevItem
      
runState s2 $ createCircularListZipper [1, 2, 3]

s3 = do
  prevItem
  prevItem
  prevItem
  nextItem
      
runState s3 $ createCircularListZipper [1, 2, 3]

s4 = do
  nextItem
  nextItem
  nextItem
  nextItem
  nextItem
  nextItem
    
runState s4 $ createCircularListZipper [1, 2, 3]

s6 = do
  nextItem
    
runState s6 $ createCircularListZipper [1, 2, 3]

s7 = do
  nextItem
  prevItem
    
runState s7 $ createCircularListZipper [1, 2, 3]

s8 = do
  prevItem
  
runState s8 $ createCircularListZipper [1, 2, 3]

s9 = do
  prevItem
  nextItem
    
runState s9 $ createCircularListZipper [1, 2, 3]

s10 = do
  prevItem
  prevItem
  prevItem
  prevItem
  prevItem
  prevItem
  nextItem
    
runState s10 $ createCircularListZipper [1, 2, 3]

stat = do
  a <- nextItem
  nextItem
  b <- nextItem
  c <- prevItem
  return (a, b, c)
  
fst . runState stat $ createCircularListZipper [1, 2, 3]

take 10 . fst . runState (sequence $ repeat prevItem)
  $ createCircularListZipper [1, 2, 3]
